/*
 * Hej.asm
 *
 *  Created: 2019-03-04 10:13:54
 *   Author: elith238
 */ 


 

	.org	0
	rjmp	COLD
	.org	INT0addr
	rjmp	ROTATE
	.org	OVF1addr
	rjmp	GRAVITY
	.org	OVF0addr
	rjmp	MUX

; --------------------------  
; |---  VARIABLE LAYOUT  ---|
; ---------------------------	
.def	MUXCOUNTER  = r19
.def	LOOPCOUNTER = r21
.def	BOOLEAN		= r18
.equ	BLOCK_SIZE  = 3
; -------------------------  
; |---  MEMORY LAYOUT  ---|
; -------------------------	
.dseg
VMEM:	.byte 16
LINE:	.byte 1				; Sparar vilken rad vi är på för att MUX:a rätt
POSX:	.byte BLOCK_SIZE
POSY:   .byte BLOCK_SIZE
SEED:	.byte 1
FIGURE: .byte 1				; 1 = I | 2 = L1 | 4 = L2 | 8 = SQUARE | 10 = Z1 | 20 = Z2 | 40 = PYRAMID
ROT:	.byte 1				; 0 = NO rotation, 1 = 1 rotation, 2 = 2 rotations, 3 = 3 rotations, 4 = 4 rotations (Back to 0)
ROTP:	.byte 1				; Rotationspunkt -> rotera kring och kompensera i x-led för rotationen

; ------------------------  
; |---  CODE SEGMENT  ---|
; ------------------------	
.cseg

COLD:				
	ldi		r16, HIGH(RAMEND)
	out		SPH, r16
	ldi		r16, LOW(RAMEND)
	out		SPL, r16
	clr		MUXCOUNTER

	ldi		ZH, HIGH(LINE)
	ldi		ZL, LOW(LINE)
	ldi		r16, $01
	st		Z, r16

	ldi		ZH, HIGH(ROT)
	ldi		ZL, LOW(ROT)
	clr		r16
	st		Z, r16

	ldi		ZH, HIGH(ROTP)
	ldi		ZL, LOW(ROTP)
	ldi		r16, $10
	st		Z, r16

	rcall	VMEM_INIT
	call	HW_INIT

WARM:
	rcall	GAME_OVER
	rcall	BUILD_BLOCK

START:
	rcall	GET_KEY
	rjmp	START

 GET_KEY:
	sbic	PINA, 0
	call	MOV_LEFT

	sbic	PINA, 1
	rcall	MOV_RIGHT

	ret

  ;-----------------------------
  ;--- VMEM initieras med värden
  ;--- "Nollställer spelplanen"
VMEM_INIT:
	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	clr		r16
	ldi		r17, $FF
VMEM_SET:
	st		Z+,	r17
	inc		r16
	sbrs	r16, 4
	rjmp	VMEM_SET
	ret

GAME_OVER:
	push	ZH
	push	ZL
	push	r19
	push	r16

	ldi		r16, (0 << CS11 | 0 << CS10 | 0 << CS12| 0 << WGM12)	
	out		TCCR1B, r16	

	clr		r16
GG_SET_DISP:					; FUNGERAR NU
	ldi		ZH, HIGH(GG*2)
	ldi		ZL, LOW(GG*2)
	add		ZL, r16
	lpm		r19, Z
	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r16
	st		Z , r19
	ld		r19, Z
	inc		r16
	cpi		r16, $10
	brne	GG_SET_DISP

GG_DONE:
	sbis	PINA, 0
	rjmp	GG_DONE
	rcall	VMEM_INIT
	rcall	HW_INIT
	;ldi		r16, (1 << CS11 | 0 << CS10 | 0 << CS12| 1 << WGM12)	
	;out		TCCR1B, r16	

	pop		r16
	pop		r19
	pop		ZL
	pop		ZH
	ret 
	
  ;-----------------------------
  ;--- MOVEMENT - LEFT
  ;--- USES: Z, r16, r17, 
MOV_LEFT:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	BOOLEAN 
	push	LOOPCOUNTER
	clr		BOOLEAN
	ldi		LOOPCOUNTER, BLOCK_SIZE

	rcall	BORDER_CHECK		; Check borders before movement
	rcall	BLOCKED_LEFT
MOVING_L:
	dec		LOOPCOUNTER

	sbrc	BOOLEAN, 0
	rjmp	END_MOVL

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	add		ZL, LOOPCOUNTER
	ld		r16, Z
		
	com		r16		
	lsr		r16
	com		r16
	st		Z, r16

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	add		ZL, LOOPCOUNTER
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17
	ld		r17, Z
	com		r16
	lsl		r16
	or		r17, r16
	lsr		r16
	com		r16	
	and		r17, r16
	st		Z, r17


END_MOVL:
	cpi		LOOPCOUNTER, 0
	brne	MOVING_L
	
	ldi		ZH, HIGH(ROTP)
	ldi		ZL, LOW(ROTP)
	ld		r16, Z
	sbrs	BOOLEAN, 0
	lsr		r16
	st		Z, r16

	rcall	WAIT_RELEASE	
	pop		LOOPCOUNTER
	pop		BOOLEAN
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret

  ;-----------------------------
  ;--- MOVEMENT - RIGHT
  ;--- USES: Z, r16, r17
MOV_RIGHT:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	BOOLEAN
	push	LOOPCOUNTER
	clr		BOOLEAN
	ldi		LOOPCOUNTER, BLOCK_SIZE

	rcall	BORDER_CHECK
	sbrs	BOOLEAN, 0
	rcall	BLOCKED_RIGHT
MOVING_R:
	dec		LOOPCOUNTER
	
	sbrc	BOOLEAN, 0
	rjmp	END_MOVR

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	add		ZL, LOOPCOUNTER
	ld		r16, Z

	com		r16	
	lsl		r16
	com		r16
	st		Z, r16

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	add		ZL, LOOPCOUNTER
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17
	ld		r17, Z
	com		r16
	lsr		r16
	or		r17, r16
	lsl		r16
	com		r16	
	and		r17, r16
	st		Z, r17


END_MOVR:
	cpi		LOOPCOUNTER, 0
	brne	MOVING_R

	ldi		ZH, HIGH(ROTP)
	ldi		ZL, LOW(ROTP)
	ld		r16, Z
	sbrs	BOOLEAN, 0
	lsl		r16
	st		Z, r16

	rcall	WAIT_RELEASE	
	pop		LOOPCOUNTER
	pop		BOOLEAN
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret
	
WAIT_RELEASE:
	sbic	PINA, 0
	rjmp	WAIT_RELEASE
	sbic	PIND, 2
	rjmp	WAIT_RELEASE
	sbic	PINA, 1
	rjmp	WAIT_RELEASE
	ret

BORDER_CHECK:
	push	LOOPCOUNTER
	push	r16
	push	r17
	ldi		LOOPCOUNTER, 0
 CHECKING_BORDER:
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	add		ZL, LOOPCOUNTER
	ld		r16, Z

	sbis	PINA, 1
	rjmp	CHECKING_L
 CHECKING_R:
	mov		r17, r16
	andi	r17, $80		; Border check
	sbrs	r17, 7			; - Bättre eftersom generell lösning
	ldi		BOOLEAN, 1	
	rjmp	END_BORDER

 CHECKING_L:
	andi	r16, $01
	sbrs	r16, 0
	ldi		BOOLEAN, 1	

END_BORDER:
	inc		LOOPCOUNTER
	cpi		LOOPCOUNTER, BLOCK_SIZE
	brne	CHECKING_BORDER

	pop		r17
	pop		r16
	pop		LOOPCOUNTER
	ret
  ;-------------------------------------
  ;--- CHECK IF BLOCKED BY BITS 
  ;--- USES: Z, r16, r17
BLOCKED_RIGHT:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r20
	push	LOOPCOUNTER
	clr		LOOPCOUNTER
LOOP_R:
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	add		ZL, LOOPCOUNTER
	ld		r16, Z

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	add		ZL, LOOPCOUNTER
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17
	ld		r17, Z

	com		r16
	mov		r20, r16
	add		r17, r16
	lsl		r16
	lsl		r20

	and		r16, r17
	cp		r16, r20
	breq	END_BRCHECK
	ldi		BOOLEAN, 1
END_BRCHECK:
	inc		LOOPCOUNTER
	cpi		LOOPCOUNTER, BLOCK_SIZE
	brne	LOOP_R

	pop		LOOPCOUNTER
	pop		r20
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret
	
  ;-------------------------------------
  ;--- CHECK IF BLOCKED BY BITS 
  ;--- USES: Z, r16, r17
BLOCKED_LEFT:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r20
	push	LOOPCOUNTER
	clr		LOOPCOUNTER
LOOP_L:
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	add		ZL, LOOPCOUNTER
	ld		r16, Z

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	add		ZL, LOOPCOUNTER
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17
	ld		r17, Z

	com		r16
	mov		r20, r16
	add		r17, r16
	lsr		r16
	lsr		r20

	and		r16, r17
	cp		r16, r20
	breq	END_BLCHECK
	ldi		BOOLEAN, 1
END_BLCHECK:
	inc		LOOPCOUNTER
	cpi		LOOPCOUNTER, BLOCK_SIZE
	brne	LOOP_L

	pop		LOOPCOUNTER
	pop		r20
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret
  ;-------------------------------------
  ;--- MUX
  ;--- USES: Z, r16, r17, MUXCOUNTER (r19)
MUX:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r18

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, MUXCOUNTER
	ld		r16, Z
	subi	ZL, -8
	ld		r18, Z

	ldi		ZH, HIGH(LINE)
	ldi		ZL, LOW(LINE)
	ld		r17, Z
SPI_LCD:
	//BLUE
	out		SPDR, r17
	rcall	Wait_Transmit
	//GREEN
	out		SPDR, r17
	rcall	Wait_Transmit
	//RED
	out		SPDR, r17
	rcall	Wait_Transmit
	//KOLUMN (Satta värden visas ej)	
	;ld		r18, Z
	out		SPDR, r16
	rcall	Wait_Transmit

	//BLUE	
	out		SPDR, r17
	rcall	Wait_Transmit
	//GREEN
	out		SPDR, r17
	rcall	Wait_Transmit
	//RED
	out		SPDR, r17
	rcall	Wait_Transmit
	//KOLUMN (Satta värden visas ej)	
	;ld		r18, Z
	out		SPDR, r18
	rcall	Wait_Transmit

	rjmp	SEND_BITS

Wait_Transmit:
	sbis	SPSR,SPIF
	rjmp	Wait_Transmit
	ret
SEND_BITS:
	sbi		PORTB, 0
	cbi		PORTB, 0

	inc		MUXCOUNTER
	sbrc	MUXCOUNTER, 3
	clr		MUXCOUNTER

	cpi		r17, $80
	brne	NOT_0
	ldi		r17, $01
	rjmp	END_MUX
NOT_0:
	lsl		r17
END_MUX:
	st		Z, r17
	ldi		ZH, HIGH(SEED)
	ldi		ZL, LOW(SEED)
	ld		r17, Z
	inc		r17
	st		Z, r17

	pop		r18
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH

	reti
	
  ;-------------------------------------
  ;--- GRAVITY - DROPS THE BLOCKS 
  ;--- USES: Z, r16, r17, LOOPCOUNTER, r20
GRAVITY:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r20
	push	LOOPCOUNTER
	ldi		LOOPCOUNTER, BLOCK_SIZE

	clr		r20
	call	CHECK_COLLISION
	sbrc	r20, 0			; BOOLEAN 
	rjmp	END_GRAV
FALLING:
	dec		LOOPCOUNTER

	ldi		ZL, LOW(POSX)
	ldi		ZH, HIGH(POSX)
	add		ZL, LOOPCOUNTER
	ld		r16, Z

	ldi		ZL, LOW(POSY)
	ldi		ZH, HIGH(POSY)
	add		ZL, LOOPCOUNTER
	ld		r17, Z
	inc		r17
	st		Z, r17

	ldi		ZL, LOW(VMEM)
	ldi		ZH, HIGH(VMEM)
	add		ZL, r17
	ld		r17, Z
	and		r17, r16
	st		Z, r17

	call	UPDATE_POS
	cpi		LOOPCOUNTER, 0
	brne	FALLING
END_GRAV:
	pop		LOOPCOUNTER
	pop		r20
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	reti
	
  ;-------------------------------------
  ;--- UPDATE VMEM WITH NEW COORDINATES
  ;--- (ERASE OLD COORDINATES)
  ;--- USES: Z, r16, r17, r18
UPDATE_POS:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r18
UPDATING_POS:	
	ldi		ZL, LOW(POSX)
	ldi		ZH, HIGH(POSX)
	add		ZL, LOOPCOUNTER
	ld		r16, Z	
		
	ldi		ZL, LOW(POSY)
	ldi		ZH, HIGH(POSY)
	add		ZL, LOOPCOUNTER
	ld		r17, Z
	dec		r17

	ldi		ZL, LOW(VMEM)
	ldi		ZH, HIGH(VMEM)
	add		ZL, r17
	ld		r17, Z

	com		r16
	or		r17, r16
	st		Z, r17
END_UPDATE:
	pop		r18
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret
	
  ;-------------------------------------
  ;--- CHECK IF COLLISION
  ;--- IF YES -> BUILD NEW BLOCK
  ;--- USES: Z, r17, r18, r19
CHECK_COLLISION:
	push	ZH
	push	ZL
	push	r17
	push	r18
	push	r19
	push	r16
	push	LOOPCOUNTER
	clr		LOOPCOUNTER

CHECKING_COLL:
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	add		ZL, LOOPCOUNTER
    ld		r18, Z+

	ldi		r16, $FF
	cpi		LOOPCOUNTER, BLOCK_SIZE-1
	breq	C1
	ld		r16, Z
C1:
	ldi		ZL, LOW(POSY)
	ldi		ZH, HIGH(POSY)
	add		ZL, LOOPCOUNTER
	ld		r17, Z
  
	cpi		r18, $FF
	breq	NOT_BOTTOM
	cpi		r17, $0F	
	breq	HIT
NOT_BOTTOM:
    ldi		ZH, HIGH(VMEM)
    ldi		ZL, LOW(VMEM)
	inc		r17
    add		ZL, r17
    ld		r17, Z
	
	com		r16 
	add		r17, r16
	mov		r19, r17
    com		r18         ; $EF -> $10 etc
	or		r19, r18
    cp		r17, r19
    brne	HIT
CHECK_LOOP:
	inc		LOOPCOUNTER
	cpi		LOOPCOUNTER, BLOCK_SIZE
	brne	CHECKING_COLL
	rjmp	END_CHECK
HIT:
	sbi		PORTD, 0
	ldi		r20, $01
	rcall	CHECK_ROW_FILLED
	rcall	CHECK_IF_LOST
	rcall	BUILD_BLOCK
END_CHECK:
	cbi		PORTD, 0
	pop		LOOPCOUNTER
	pop		r16
	pop		r19
	pop		r18
	pop		r17
	pop		ZL
	pop		ZH
	ret

CHECK_IF_LOST:
	push	ZH
	push	ZL
	push	r16

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	inc		ZL
	ld		r16, Z
	cpi		r16, $FF
	breq	END_LOSS_CHECK
LOST:
	sbi		PORTD, 3
	;rcall	GAME_OVER	
	rcall	VMEM_INIT
END_LOSS_CHECK:
	cbi		PORTD, 3
	pop		r16
	pop		ZL
	pop		ZH
	ret
	

  ;------------------------------------------
  ;--- CHECK IF ROW IS FILLED
  ;--- IF YES -> DELETE ROW, ROWS ABOVE FALL
  ;--- USES: Z, r16, r17, r18, r20
CHECK_ROW_FILLED:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r18
	push	r20

	ldi		r20, 1
	ldi		ZH, HIGH(VMEM)
UPDATE_LOOP:
	ldi		ZL, LOW(VMEM)
	ld		r18, Z		;(Sparar värdet)
	add		ZL, r20
	ld		r17, Z
	cpi		r17, $00
	brne	DONE_ROW
	mov		r16, r20	; Intern loop counter för FULL_ROW_FOUND

FULL_ROW_FOUND:
	dec		r16			; Kolla raden ovanför den fulla
	ldi		ZL, LOW(VMEM)
	add		ZL, r16
	ld		r17, Z		; Z så ladda och öka ZL
	inc		ZL
	inc		r16			; Återställ countern
	st		Z, r17

	dec		ZL			; Tillbaks till raden ovanför
	ldi		r17, $FF	; Nollställ raden
	st		Z, r17		; Spara nollställningen
	
	dec		r16
	cpi		r16, 0
	brne	FULL_ROW_FOUND
	sbi		PORTD, 1	; Spela ljud
DONE_ROW:				; |
	cbi		PORTD, 1	; |
	inc		r20
	cpi		r20, $10
	brne	UPDATE_LOOP

	pop		r20
	pop		r18
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret

BUILD_BLOCK:		
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	LOOPCOUNTER
	clr		LOOPCOUNTER

	
	ldi		ZH, HIGH(ROTP)
	ldi		ZL, LOW(ROTP)
	ldi		r16, $10
	st		Z, r16

	ldi		ZH, HIGH(ROT)
	ldi		ZL, LOW(ROT)
	clr		r16
	st		Z, r16

	ldi		ZH, HIGH(SEED)
	ldi		ZL, LOW(SEED)
	ld		r16, Z
	;com		r16
	mov		r17, r16
	com		r17
MOD_2:
	lsr		r17
	inc		LOOPCOUNTER
	cpi		LOOPCOUNTER, 5
	brne	MOD_2
	rol		r17
	com		r17
	sub		r16, r17
	rol		r16
	;eor		r16, r17
	
	sbrs	r16, 6
	rcall	BUILD_BLOCK_Z2

	sbrs	r16, 5
	rcall	BUILD_BLOCK_Z1

	sbrs	r16, 4
	rcall	BUILD_BLOCK_PYRAMID 

	sbrs	r16, 3
	rcall	BUILD_BLOCK_L1

	sbrs	r16, 2
	rcall	BUILD_BLOCK_L2

	sbrs	r16, 1
	rcall	BUILD_BLOCK_I

	sbrs	r16, 0
	rcall	BUILD_BLOCK_SQUARE

	pop		LOOPCOUNTER
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret
; ----------------------------------------
; -- BLOCKMINNE FÖR SKAPANDE AV BLOCKEN -- 
; --   USES: Z, r16, r17, LOOPCOUNTER   --
; ----------------------------------------
BUILD_BLOCK_I:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	LOOPCOUNTER
	clr		LOOPCOUNTER

	ldi		r17, 1
	ldi		ZL, LOW(FIGURE)
	st		Z, r17
	clr		r17
BUILDING_I:
	ldi		r16, $EF

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	add		ZL, LOOPCOUNTER
	st		Z, r16

	
	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	add		ZL, LOOPCOUNTER
	st		Z, r17

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, LOOPCOUNTER
	st		Z, r16
	inc		LOOPCOUNTER
	inc		r17
	cpi		LOOPCOUNTER, BLOCK_SIZE
	brne	BUILDING_I
FINISHED_BUILD_I:
	pop		LOOPCOUNTER
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret

BUILD_BLOCK_L1:
	push	ZH
	push	ZL
	push	r16
	push	r17

	ldi		r16, 2
	ldi		ZH, HIGH(FIGURE)
	ldi		ZL, LOW(FIGURE)
	st		Z, r16
	clr		r16

	ldi		r16, $E7
	clr		r17

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r16
	ldi		r17, $EF
	st		Z+, r17
	st		Z, r17
	
	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	st		Z+, r16
	st		Z+, r17
	st		Z, r17
	
	clr		r16
	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	st		Z+, r16
	inc		r16
	st		Z+, r16
	inc		r16
	st		Z, r16
	
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret

BUILD_BLOCK_L2:
	push	ZH
	push	ZL
	push	r16
	push	r17

	ldi		r17, $04
	ldi		ZL, LOW(FIGURE)
	st		Z, r17

	clr		r17
	clr		r17
	clr		r18

	ldi		r16, $CF
	clr		r17

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r16
	ldi		r17, $EF
	st		Z+, r17
	st		Z, r17
	
	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	st		Z+, r16
	st		Z+, r17
	st		Z, r17
	
	clr		r16
	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	st		Z+, r16
	inc		r16
	st		Z+, r16
	inc		r16
	st		Z, r16

	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret

BUILD_BLOCK_SQUARE:
	push	ZH
	push	ZL
	push	r16
	push	r17

	ldi		r16, 8
	ldi		ZH, HIGH(FIGURE)
	ldi		ZL, LOW(FIGURE)
	st		Z, r16

	clr		r16
	clr		r17
	clr		r18

	ldi		r16, $E7

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r16
	st		Z+, r16

	ldi		r17, $FF
	st		Z, r17
	
	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	st		Z+, r16
	st		Z+, r16
	st		Z, r17
	
	clr		r16
	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	st		Z+, r16
	inc		r16
	st		Z+, r16
	inc		r16
	st		Z, r16

	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret
BUILD_BLOCK_PYRAMID:
	push	ZH
	push	ZL
	push	r16
	push	r17

	ldi		r16, $10
	ldi		ZH, HIGH(FIGURE)
	ldi		ZL, LOW(FIGURE)
	st		Z, r16
	clr		r16

	ldi		r16, $EF
	ldi		r17, $CF

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r16
	st		Z+, r17
	st		Z, r16
	
	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	st		Z+, r16
	st		Z+, r17
	st		Z, r16
	
	clr		r16
	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	st		Z+, r16
	inc		r16
	st		Z+, r16
	inc		r16
	st		Z, r16
	
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret
BUILD_BLOCK_Z1:
	push	ZH
	push	ZL
	push	r16
	push	r17

	ldi		r16, $20
	ldi		ZH, HIGH(FIGURE)
	ldi		ZL, LOW(FIGURE)
	st		Z, r16

	clr		r16
	clr		r17
	clr		r18

	ldi		r16, $EF
	ldi		r17, $E7
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r16
	st		Z+, r17
	ldi		r16, $F7
	st		Z, r16

	ldi		r16, $EF
	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	st		Z+, r16
	st		Z+, r17
	ldi		r17, $F7
	st		Z, r17
	
	clr		r16
	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	st		Z+, r16
	inc		r16
	st		Z+, r16
	inc		r16
	st		Z, r16

	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret

BUILD_BLOCK_Z2:
	push	ZH
	push	ZL
	push	r16
	push	r17

	ldi		r16, $40
	ldi		ZH, HIGH(FIGURE)
	ldi		ZL, LOW(FIGURE)
	st		Z, r16

	clr		r16
	clr		r17
	clr		r18

	ldi		r16, $F7
	ldi		r17, $E7
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r16
	st		Z+, r17
	ldi		r16, $EF
	st		Z, r16

	ldi		r16, $F7
	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	st		Z+, r16
	st		Z+, r17
	ldi		r17, $EF
	st		Z, r17
	
	clr		r16
	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	st		Z+, r16
	inc		r16
	st		Z+, r16
	inc		r16
	st		Z, r16

	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	ret

; --------------------------------------------
; -- ROTATIONSMINNE FÖR SKAPANDE AV BLOCKEN -- 
; --     USES: Z, r16, r17, LOOPCOUNTER		--
; -- 1 = I | 2 = L1 | 4 = L2 | 8 = SQUARE | --
; --   | 10 = Z1 | 20 = Z2 | 40 = PYRAMID   --
; --------------------------------------------

ROTATE:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	BOOLEAN					;Rensa några register som inte används
	clr		BOOLEAN

	ldi		ZH, HIGH(ROTP)
	ldi		ZL, LOW(ROTP)
	ld		r17, Z	

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	subi	ZL, -1				; För hårt villkor?
	ld		r16, Z
	cpi		r16, $0F
	breq	END_ROTATE

	call	BLOCKED_RIGHT		; ROTATIONSKRAV
	sbrc	BOOLEAN, 0			; |
	rjmp	END_ROTATE			; |
	call	BLOCKED_LEFT		; |
	sbrc	BOOLEAN, 0			; |
	rjmp	END_ROTATE			; |
	sbrc	r17, 0				; |
	rjmp	END_ROTATE			; |
	sbrc	r17, 7				; |
	rjmp	END_ROTATE			; |

	ldi		ZH, HIGH(FIGURE)
	ldi		ZL, LOW(FIGURE)
	ld		r17, Z
	
	sbrc	r17, 0
	rcall	ROTATE_I

	sbrc	r17, 1
	rcall	ROTATE_L1

	sbrc	r17, 2
	rcall	ROTATE_L2

	sbrc	r17, 3				;SQUARE
	rjmp	END_ROTATE

	sbrc	r17, 4
	rcall	ROTATE_PYRAMID

	sbrc	r17, 5
	rcall	ROTATE_Z1

	sbrc	r17, 6
	rcall	ROTATE_Z2


	ldi		ZH, HIGH(ROT)
	ldi		ZL, LOW(ROT)
	ld		r17, Z
	inc		r17
	mov		r16, r17
	lsr		r16
	sbrc	r16, 1
	clr		r17
	st		Z, r17			
END_ROTATE:
  ;  call	WAIT_RELEASE
	pop		BOOLEAN
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH
	reti

COMPENSATE:
	push	ZH
	push	ZL
	push	r22
	ldi		ZH, HIGH(ROTP)
	ldi		ZL, LOW(ROTP)
	ld		r17, Z
	com		r20
	com		r23
	ldi		r22, $10 
	cp		r17, r22
	breq	END_COMP

	cp		r17, r22
	brlo	COMP_R
COMP_L:
	lsl		r20
	lsl		r22
	lsl		r23
	cp		r17, r22 
	brne	COMP_L
	rjmp	END_COMP
COMP_R:
	lsr		r20
	lsr		r22
	lsr		r23
	cp		r17, r22
	brne	COMP_R
END_COMP:
	com		r20
	com		r23
	pop		r22
	pop		ZL
	pop		ZH
	ret

ROTATE_I:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r18
	push	r19
	push	r20

	ldi		ZH, HIGH(ROT)
	ldi		ZL, LOW(ROT)
	ld		r18, Z

	sbrc	r18, 0
	rjmp	ROT_I_2

ROT_I_1:
	ldi		r20, $C7

	rcall	COMPENSATE

	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z
	st		Z+, r17
	st		Z+, r20
	st		Z,  r17

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17
	com		r16
	ld		r17, Z
	or		r17, r16
	st		Z+, r17
	ld		r17, Z
	or		r17, r16
	and		r17, r20
	st		Z+, r17
	ld		r17, Z
	or		r17, r16
	st		Z, r17

	rjmp	END_ROTI
ROT_I_2:
	ldi		r20, $EF
	ldi		ZH, HIGH(ROTP)
	ldi		ZL, LOW(ROTP)			
	ld		r17, Z
	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	subi	ZL, -1			      ; Bara figur på andra raden i minnet
	ld		r16, Z	

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17
	com		r16
	ld		r17, Z
	and		r17, r20
	st		Z+, r17
	ld		r17, Z
	or		r17, r16
	and		r17, r20
	st		Z+, r17
	ld		r17, Z
	and		r17, r20
	st		Z, r17
	
	ldi		ZH, HIGH(POSX)      ; Spara nya värden i POSX efter VMEM?
	ldi		ZL, LOW(POSX)
	st		Z+, r20
	st		Z+, r20
	st		Z,  r20

END_ROTI:
	pop		r20
	pop		r19
	pop		r18
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH

	ret

ROTATE_L1:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r18
	push	r19
	push	r20

	ldi		ZH, HIGH(ROT)
	ldi		ZL, LOW(ROT)
	ld		r18, Z

	cpi		r18, 0
	breq	ROT_L1_1
	cpi		r18, 1
	breq	ROT_L1_2
	rjmp	ROT_CL1

ROT_L1_1:
	ldi		r20, $C7
	ldi		r23, $F7

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r23
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r17
	st		Z+, r20
	st		Z,  r23

	rjmp	END_ROTL1
ROT_L1_2:
	ldi		r20, $EF
	ldi		r23, $CF

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r16
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r23
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r20
	st		Z+, r20
	st		Z,  r23

	rjmp	END_ROTL1
ROT_CL1:					
	cpi		r18, 3
	breq	ROT_L1_4
ROT_L1_3:
	ldi		r20, $C7
	ldi		r23, $DF

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	or		r17, r16
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r23
	st		Z+, r20
	st		Z,  r17

	rjmp	END_ROTL1
ROT_L1_4:
	ldi		r20, $EF
	ldi		r23, $E7

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	and		r17, r20
	st		Z,   r17

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r23
	st		Z+, r20
	st		Z,  r20

END_ROTL1:
	pop		r20
	pop		r19
	pop		r18
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH

	ret

ROTATE_L2:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r18
	push	r19
	push	r20

	ldi		ZH, HIGH(ROT)
	ldi		ZL, LOW(ROT)
	ld		r18, Z

	cpi		r18, 0
	breq	ROT_L2_1
	cpi		r18, 1
	breq	ROT_L2_2
	rjmp	ROT_CL2

ROT_L2_1:
	ldi		r20, $C7
	ldi		r23, $F7

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	;and		r17, r23
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r23
	st		Z+, r20
	st		Z,  r17

	rjmp	END_ROTL2
ROT_L2_2:
	ldi		r20, $EF
	ldi		r23, $E7

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r19, Z+

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	and		r17, r23
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r20
	st		Z+, r20
	st		Z,  r23

	rjmp	END_ROTL2
ROT_CL2:					
	cpi		r18, 3
	breq	ROT_L2_4
ROT_L2_3:
	ldi		r20, $C7
	ldi		r23, $DF

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	;and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	or		r17, r16
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r23
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r17
	st		Z+, r20
	st		Z,  r23

	rjmp	END_ROTL2
ROT_L2_4:
	ldi		r20, $EF
	ldi		r23, $CF;$E7

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	;or		r17, r16
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	or		r17, r16
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r20
	st		Z,   r17

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r23
	st		Z+, r20
	st		Z,  r20

END_ROTL2:
	pop		r20
	pop		r19
	pop		r18
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH

	ret

ROTATE_PYRAMID:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r18
	push	r19
	push	r20

	ldi		ZH, HIGH(ROT)
	ldi		ZL, LOW(ROT)
	ld		r18, Z

	cpi		r18, 0
	breq	ROT_PYRAMID_1
	cpi		r18, 1
	breq	ROT_PYRAMID_2
	rjmp	ROT_CL3

ROT_PYRAMID_1:
	ldi		r20, $C7
	ldi		r23, $EF

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r16
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r23
	st		Z+, r20
	st		Z,  r17

	rjmp	END_ROTP
ROT_PYRAMID_2:
	ldi		r20, $EF
	ldi		r23, $E7

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	and		r17, r20
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r20
	st		Z+, r23
	st		Z,  r20

	rjmp	END_ROTP
ROT_CL3:					
	cpi		r18, 3
	breq	ROT_PYRAMID_4
ROT_PYRAMID_3:
	ldi		r20, $C7
	ldi		r23, $EF

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r16
	and		r17, r23
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r17
	st		Z+, r20
	st		Z,  r23

	rjmp	END_ROTP
ROT_PYRAMID_4:
	ldi		r20, $EF
	ldi		r23, $CF

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r16
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r20
	st		Z,   r17

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r20
	st		Z+, r23
	st		Z,  r20

END_ROTP:
	pop		r20
	pop		r19
	pop		r18
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH

	ret

ROTATE_Z1:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r18
	push	r19
	push	r20

	ldi		ZH, HIGH(ROT)
	ldi		ZL, LOW(ROT)
	ld		r18, Z

	sbrc	r18, 0
	rjmp	ROT_Z1_2

ROT_Z1_1:
	ldi		r20, $CF
	ldi		r23, $E7

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r18, Z+
	ld		r19, Z

	com		r16
	com		r18
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	or		r17, r18
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r23
	st		Z+, r20
	st		Z,  r17

	rjmp	END_ROTZ1
ROT_Z1_2:
	ldi		r20, $EF
	ldi		r23, $E7

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	;or		r17, r16
	com		r20
	lsr		r20
	com		r20
	and		r17, r20
	st		Z,   r17
	
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	mov		r19, r20
	com		r20
	lsl		r20
	com		r20
	st		Z+, r20
	st		Z+, r23
	st		Z,  r19

END_ROTZ1:
	pop		r20
	pop		r19
	pop		r18
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH

	ret

ROTATE_Z2:
	push	ZH
	push	ZL
	push	r16
	push	r17
	push	r18
	push	r19
	push	r20

	ldi		ZH, HIGH(ROT)
	ldi		ZL, LOW(ROT)
	ld		r18, Z

	sbrc	r18, 0
	rjmp	ROT_Z2_2

ROT_Z2_1:
	ldi		r20, $F3
	ldi		r23, $E7

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r18, Z+
	ld		r19, Z

	com		r16
	com		r18
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	or		r17, r18
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	st		Z,   r17
	
	ldi		r17, $FF
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	st		Z+, r23
	st		Z+, r20
	st		Z,  r17

	rjmp	END_ROTZ1
ROT_Z2_2:
	ldi		r20, $F7
	ldi		r23, $E7

	rcall	COMPENSATE

	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	ld		r16, Z+
	ld		r19, Z

	com		r16
	com		r19

	ldi		ZH, HIGH(POSY)
	ldi		ZL, LOW(POSY)
	ld		r17, Z

	ldi		ZH, HIGH(VMEM)
	ldi		ZL, LOW(VMEM)
	add		ZL, r17

	ld		r17, Z
	or		r17, r16
	and		r17, r20
	st		Z+,  r17
	ld		r17, Z
	or		r17, r19
	and		r17, r23
	st		Z+,  r17
	ld		r17, Z
	com		r20
	lsl		r20
	com		r20
	and		r17, r20
	st		Z,   r17
	
	ldi		ZH, HIGH(POSX)
	ldi		ZL, LOW(POSX)
	mov		r19, r20
	com		r20
	lsr		r20
	com		r20
	st		Z+, r20
	st		Z+, r23
	st		Z,  r19

END_ROTZ2:
	pop		r20
	pop		r19
	pop		r18
	pop		r17
	pop		r16
	pop		ZL
	pop		ZH

	ret

HW_INIT:											
	ldi		r17,(1<<DDB5)|(1<<DDB7)|(1<<DDB4)|(1<<DDB0)		  ; Set MOSI, SCK, SS, PB0  output, all others input
	out		DDRB,r17
												
	ldi		r17,(1<<SPE)|(1<<MSTR)|(0<<SPR0)			      ; Enable SPI, Master, set clock rate fck/4
	out		SPCR,r17
	cbi		PORTB, 0

	ldi		r16, (1 << CS01)
	out		TCCR0, r16
	ldi		r16, (1 << CS11 | 0 << CS10 | 0 << CS12| 1 << WGM12)	;	fclk / 8

	out		TCCR1B, r16	
	ldi		r16, (1 << TOIE0 | 1 << OCIE1B)
	out		TIMSK, r16

	ldi		r16,(1<<ISC01)|(0<<ISC00)
	out		MCUCR, r16
	ldi		r16,(1<<INT0)
	out		GICR, r16

	ldi		r17, $3D
	ldi		r16, $09	
	out		OCR1AH, r17		
	out		OCR1AL, r16
	
	ldi		r16, $0B
	out		DDRD, r16					
	clr		r16
	out		DDRA, r16								
	sei

	ret


	GG:		.db $C3, $DF, $DF, $DF, $D3, $DB, $DB, $C3, $C3, $DF, $DF, $DF, $D3, $DB, $DB, $C3
